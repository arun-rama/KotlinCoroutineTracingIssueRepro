/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.9.0"

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.9.3")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:32.1.1-jre")

    // kotlinx
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-slf4j:1.7.3")
    // tracing
    implementation("io.opentracing:opentracing-api:0.33.0")
    implementation("com.datadoghq:dd-trace-ot:1.20.1") // latest 1.20.1
    // logging
    implementation("ch.qos.logback:logback-core:1.4.11")
    implementation("ch.qos.logback:logback-classic:1.4.11")
    implementation("org.slf4j:slf4j-api:2.0.9")


}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("kotlincoroutinetracingissuerepro.AppKt")
    applicationDefaultJvmArgs = listOf(
        "-Ddd.service=cash-exemplar",
        "-Ddd.env=staging",
        "-Ddd.trace.analytics.enabled=true",
        "-Ddd.trace.partial.flush.min.spans=1000",
        "-Ddd.tags=testing:dx,app:cash-exemplar,javaagent.path:build/libs/dd-java-agent.jar,javaagent.version:1.12.1",
        "-Ddd.integration.jdbc-datasource.enabled=true",
        "-Ddd.service.mapping=cronjob:cash-exemplar-cronjob,elasticsearch:cash-exemplar-elasticsearch,hibernate:cash-exemplar-hibernate,java-aws-sdk:cash-exemplar-java-aws-sdk,kafka:cash-exemplar-kafka,mysql:cash-exemplar-mysql,redis:cash-exemplar-redis,sqs:cash-exemplar-sqs,transacter:cash-exemplar-transacter",
        "-Ddd.trace.propagation.style.inject=Datadog,B3single,B3multi",
        "-Ddd.trace.propagation.style.extract=Datadog,B3single,B3multi",
        "-Ddd.http.server.route-based-naming=false",
        "-Ddd.trace.client-ip.enabled=true",
        "-Ddd.integration.kotlin_coroutine.experimental.enabled=true",
        "-Ddd.profiling.enabled=true",
        "-XX:FlightRecorderOptions=stackdepth=256",
        "-javaagent:build/libs/dd-java-agent.jar")
}

val devMainClass = "kotlincoroutinetracingissuerepro.AppKt"

/*
tasks.named<RunDev>("runDev").configure {
    mainClass.set(devMainClass)
    // set to true
    environment("DD_TRACE_DEBUG", false)
    jvmArgs(

    )
    // dependsOn("downloadDatadogAgent")
}
*/

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.create("printTaskInputs") {
    doLast {
        project.tasks.forEach {
            println("--------------------------------------------------------------------------------")
            println(" Task '${project.name}:${it.name}'")
            println("--------------------------------------------------------------------------------")
            println("")

            println("File inputs:")
            it.inputs.files.forEach {
                println(" - ${it}")
            }
            println("")

            println("Property inputs:")
            it.inputs.properties.forEach {
                println(" - ${it}")
            }
            println("")

            println("--------------------------------------------------------------------------------")
            println("")
        }
    }
}
